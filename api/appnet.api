<class name = "appnet" state = "stable">
 
    <!-- Constructor is optional; default one has no arguments -->
    <constructor>
        Appnet
        <argument name = "node_name" type = "string" />
    </constructor>

    <destructor/>

    <method name="set_timeout">
        Set timeout
        <argument name = "timeout" type="real" size="4"/>
    </method>

    <method name="is_application">
        Is this appnet an application?
        <return type = "boolean"/>
    </method>

    <method name="set_application">
    Set the current appnet to be an application
        <return type = "appnet_application"/>
    </method>

    <method name="get_application">
    Get the application-object
        <return type = "appnet_application"/>
    </method>

    <method name="is_client">
        Is this appnet a client?
        <return type = "boolean"/>
    </method>

    <method name="set_client">
    Set the current appnet to be a client
        <return type = "appnet_client"/>
    </method>

    <method name="get_client">
    Get the client-object
        <return type = "appnet_client"/>
    </method>    

    <method name ="process_views">
        check if views needs to trigger and call the callback
    </method>

    <method name="receive_event">
        Try to receive message. Or none if timeouted...(return type 0)
        This method will call appropriate callbacks

        <return type="number" size="1"/>
    </method>

    <method name="receive_all_events">
        Receive all messages and call the corresponding callbacks
    </method>

    <method name="start">
    Start the node
    </method>

    <method name="stop">
    Stop the node
    </method>

    <method name="node_signature">
    returns info for underlying application or client
        <return type="string" fresh="1"/>
    </method>

    <method name="get_zyre_node">
    Get underlying zyre-node
        <return type="zyre"/>
    </method>

    <method name = "get_remote_client">
        get client by uuid
        <argument name="client_uuid" type="string"/>
        <return type="appnet_client"/>
    </method>


    <method name = "get_remote_application">
        get application by uuid
        <argument name="application_uuid" type="string"/>
        <return type="appnet_application"/>
    </method>

    <method name = "get_remote_applications">
        Return all connected applications
        <return type="zhash"/>
    </method>    

    <method name = "get_remote_application_names">
        Return all connection application names
        <return type="zlist"/>
    </method>

    <method name = "remote_send_string">
        custom: send string to application.
        if to_peer=true: data is whispered to get_peer_id
        if to_peer=false: data is shouted in group
        <argument name = "msg_type" type="string"/>
        <argument name = "to_peer" type="boolean"/>
        <argument name = "recipent" type="string"/>
        <argument name = "string_data" type="string"/>
    </method>

    <method name = "remote_send_buffer">
        custom: send buffer(void* size) to application
        if to_peer=true: data is whispered to get_peer_id
        if to_peer=false: data is shouted in group
        <argument name = "msg_type" type="string"/>
        <argument name = "to_peer" type="boolean"/>
        <argument name = "recipent" type="string"/>
        <argument name = "data" type="anything"/>
        <argument name = "size" type="size"/>
    </method>  

    <!-- Callbacks -->

    <callback_type name = "on_view_request">
       <argument name = "application" type = "appnet_application" />
       <argument name = "view_context" type = "appnet_view_context"/>
    </callback_type>

    <callback_type name = "on_view_received">
       <argument name = "application" type = "appnet_application" />
       <argument name = "view_name" type="string"/>
       <argument name = "data" type = "anything"/>
       <argument name = "size" type = "size"/>
       <argument name = "userdata" type = "anything"/>
    </callback_type>

    <callback_type name = "on_app_enter">
       <argument name = "application" type = "appnet_application" />
       <argument name = "userdata" type="anything" />
    </callback_type>

    <callback_type name = "on_client_enter">
       <argument name = "client" type = "appnet_client" />
       <argument name = "userdata" type="anything" />
    </callback_type>    

    <callback_type name = "on_action_triggered">
       <argument name = "action_name" type="string" />
       <argument name = "args" type="string"/>
       <argument name = "caller_type" type="number" size="1"/>
       <argument name = "called_by" type = "anything" />
       <argument name = "userdata" type="anything" />
    </callback_type>    

    <callback_type name = "on_action_triggered_data">
       <argument name = "action_name" type="string" />
       <argument name = "args_data" type="anything"/>
       <argument name = "args_size" type="size"/>
       <argument name = "caller_type" type="number" size="1"/>
       <argument name = "called_by" type = "anything" />
       <argument name = "userdata" type="anything" />
    </callback_type>       

    <callback_type name = "on_client_enter">
       <argument name = "client" type = "appnet_client" />
       <argument name = "userdata" type="anything" />
    </callback_type>  

    <callback_type name = "on_client_exit">
       <argument name = "client" type = "appnet_client" />
       <argument name = "userdata" type="anything" />
    </callback_type>      

    <callback_type name = "on_app_exit">
       <argument name = "client" type = "appnet_application" />
       <argument name = "userdata" type="anything" />
    </callback_type>   


    <method name = "set_on_client_exit">
       <argument name ="callback" type="appnet_on_client_exit" callback="1"/>
       <argument name = "userdata" type="anything">
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_app_exit">
       <argument name ="callback" type="appnet_on_app_exit" callback="1"/>
       <argument name = "userdata" type="anything">
       Userdata to be set on each callback-call
       </argument>
    </method>


    <method name = "set_on_app_enter">
       <argument name ="callback" type="appnet_on_app_enter" callback="1"/>
       <argument name = "userdata" type="anything">
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_client_enter">
        <argument name ="callback" type="appnet_on_client_enter" callback="1"/>
       <argument name = "userdata" type="anything" >
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_action_triggered">
        <argument name ="callback" type="appnet_on_action_triggered" callback="1"/>
       <argument name = "userdata" type="anything" >
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_action_triggered_data">
       <argument name ="callback" type="appnet_on_action_triggered_data" callback="1"/>
       <argument name = "userdata" type="anything" >
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_view_received">
       <argument name ="callback" type="appnet_on_view_received" callback="1"/>
       <argument name = "userdata" type="anything" >
       Userdata to be set on each callback-call
       </argument>
    </method>

    <method name = "set_on_view_request">
       <argument name ="callback" type="appnet_on_view_request" callback="1"/>
    </method>

 </class>
