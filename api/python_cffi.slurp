################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
# Python cffi compatible file slurp

application_network_cdefs = list ()
# Custom setup for application_network

application_network_cdefs.append ('''
typedef struct _appnet_application_t appnet_application_t;
typedef struct _appnet_view_context_t appnet_view_context_t;
typedef struct _appnet_client_t appnet_client_t;
typedef struct _appnet_t appnet_t;
typedef struct _zyre_t zyre_t;
typedef struct _zhash_t zhash_t;
typedef struct _zlist_t zlist_t;
typedef struct _zyre_event_t zyre_event_t;
typedef struct _zmsg_t zmsg_t;
typedef struct _appnet_msg_t appnet_msg_t;
//
typedef void (appnet_on_view_request) (
    appnet_application_t *application, appnet_view_context_t *view_context);

//
typedef void (appnet_on_view_received) (
    appnet_application_t *application, const char *view_name, void *data, size_t size, void *userdata);

//
typedef void (appnet_on_app_enter) (
    appnet_application_t *application, void *userdata);

//
typedef void (appnet_on_client_enter) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_action_triggered) (
    const char *action_name, const char *args, uint8_t caller_type, void *called_by, void *userdata);

//
typedef void (appnet_on_action_triggered_data) (
    const char *action_name, void *args_data, size_t args_size, uint8_t caller_type, void *called_by, void *userdata);

//
typedef void (appnet_on_client_enter) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_client_exit) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_app_exit) (
    appnet_application_t *client, void *userdata);

// CLASS: appnet
// Appnet
appnet_t *
    appnet_new (const char *node_name);

// Destroy the appnet.
void
    appnet_destroy (appnet_t **self_p);

// Set timeout
void
    appnet_set_timeout (appnet_t *self, float timeout);

// Is this appnet an application?
bool
    appnet_is_application (appnet_t *self);

// Set the current appnet to be an application
appnet_application_t *
    appnet_set_application (appnet_t *self);

// Get the application-object
appnet_application_t *
    appnet_get_application (appnet_t *self);

// Is this appnet a client?
bool
    appnet_is_client (appnet_t *self);

// Set the current appnet to be a client
appnet_client_t *
    appnet_set_client (appnet_t *self);

// Get the client-object
appnet_client_t *
    appnet_get_client (appnet_t *self);

// check if views needs to trigger and call the callback
void
    appnet_process_views (appnet_t *self);

// Try to receive message. Or none if timeouted...(return type 0)
// This method will call appropriate callbacks
uint8_t
    appnet_receive_event (appnet_t *self);

// Receive all messages and call the corresponding callbacks
void
    appnet_receive_all_events (appnet_t *self);

// Start the node
void
    appnet_start (appnet_t *self);

// Stop the node
void
    appnet_stop (appnet_t *self);

// returns info for underlying application or client
char *
    appnet_node_signature (appnet_t *self);

// Get underlying zyre-node
zyre_t *
    appnet_get_zyre_node (appnet_t *self);

// get client by uuid
appnet_client_t *
    appnet_get_remote_client (appnet_t *self, const char *client_uuid);

// get application by uuid
appnet_application_t *
    appnet_get_remote_application (appnet_t *self, const char *application_uuid);

// Return all connected applications
zhash_t *
    appnet_get_remote_applications (appnet_t *self);

// Return all connection application names
zlist_t *
    appnet_get_remote_application_names (appnet_t *self);

// custom: send string to application.
// if to_peer=true: data is whispered to get_peer_id
// if to_peer=false: data is shouted in group
void
    appnet_remote_send_string (appnet_t *self, const char *msg_type, bool to_peer, const char *recipent, const char *string_data);

// custom: send buffer(void* size) to application
// if to_peer=true: data is whispered to get_peer_id
// if to_peer=false: data is shouted in group
void
    appnet_remote_send_buffer (appnet_t *self, const char *msg_type, bool to_peer, const char *recipent, void *data, size_t size);

//
void
    appnet_set_on_client_exit (appnet_t *self, appnet_on_client_exit callback, void *userdata);

//
void
    appnet_set_on_app_exit (appnet_t *self, appnet_on_app_exit callback, void *userdata);

//
void
    appnet_set_on_app_enter (appnet_t *self, appnet_on_app_enter callback, void *userdata);

//
void
    appnet_set_on_client_enter (appnet_t *self, appnet_on_client_enter callback, void *userdata);

//
void
    appnet_set_on_action_triggered (appnet_t *self, appnet_on_action_triggered callback, void *userdata);

//
void
    appnet_set_on_action_triggered_data (appnet_t *self, appnet_on_action_triggered_data callback, void *userdata);

//
void
    appnet_set_on_view_received (appnet_t *self, appnet_on_view_received callback, void *userdata);

//
void
    appnet_set_on_view_request (appnet_t *self, appnet_on_view_request callback);

// Self test of this class.
void
    appnet_test (bool verbose);

// CLASS: appnet_application
// Appnet-Application
appnet_application_t *
    appnet_application_new (appnet_t *parent);

// Create a new appnet_application.
appnet_application_t *
    appnet_application_new_from_zyre (zyre_event_t *evt, appnet_t *parent);

// Destroy the appnet_application.
void
    appnet_application_destroy (appnet_application_t **self_p);

// checks if this action exists in this application
bool
    appnet_application_has_action (appnet_application_t *self, const char *action_name);

// get application name
const char *
    appnet_application_get_name (appnet_application_t *self);

// set application name
void
    appnet_application_set_name (appnet_application_t *self, const char *application_name);

// get zyre peer id
const char *
    appnet_application_get_peer_id (appnet_application_t *self);

// set zyre peer id
void
    appnet_application_set_peer_id (appnet_application_t *self, const char *peer_id);

// return parent appnet-node
appnet_t *
    appnet_application_parent (appnet_application_t *self);

// print application data
void
    appnet_application_print (appnet_application_t *self);

// add application view ( appnet needs to be set as application-type )
bool
    appnet_application_add_view (appnet_application_t *self, const char *view, int interval);

// add multiple views to applications
void
    appnet_application_add_views (appnet_application_t *self, int interval, uint8_t view_amount, const char *view, ...);

// checks if this viewname exists in this application
bool
    appnet_application_has_view (appnet_application_t *self, const char *view_name);

// return full zyre-groupname [peer-id].[viewname]
char *
    appnet_application_zyre_group_name (appnet_application_t *self, const char *view_name);

// add this user(peer-id) to be subscriber on the specified view
void
    appnet_application_add_subscriber (appnet_application_t *self, const char *viewname, const char *peer_id);

// remove this user(peer-id) from subscriber-list of the specified view
void
    appnet_application_remove_subscriber (appnet_application_t *self, const char *viewname, const char *peer_id);

// remove subscriber from all views
void
    appnet_application_remove_subscriber_from_views (appnet_application_t *self, const char *peer_id);

// get zlist of all views-keys
zlist_t *
    appnet_application_get_view_keys (appnet_application_t *self);

// return the view-hashtable
zhash_t *
    appnet_application_get_view_hashtable (appnet_application_t *self);

// get zlist of all actions
zlist_t *
    appnet_application_get_action_list (appnet_application_t *self);

// add application action ( appnet needs to be set as application-type )
bool
    appnet_application_add_action (appnet_application_t *self, const char *action);

// add multiple views to applications
void
    appnet_application_add_actions (appnet_application_t *self, uint8_t action_amount, const char *action, ...);

// remote: subscribe for this application's view
void
    appnet_application_remote_subscribe_view (appnet_application_t *self, const char *view_name);

// subscribe to multiple views on this application
void
    appnet_application_remote_subscribe_views (appnet_application_t *self, uint8_t view_amount, const char *views, ...);

// remote: unsubscribe from specified view
void
    appnet_application_remote_unsubscribe_view (appnet_application_t *self, const char *view_name);

// remote: unsubscribe from all views of this application
void
    appnet_application_remote_unsubscribe_all (appnet_application_t *self);

// remote: trigger action
void
    appnet_application_remote_trigger_action (appnet_application_t *self, const char *action_name, const char *args);

// remote: trigger action
void
    appnet_application_remote_trigger_action_data (appnet_application_t *self, const char *action_name, void *data, size_t size);

// Reconnect to subscribed views
void
    appnet_application_remote_reconnect (appnet_application_t *self);

// get application meta data a string-json
char *
    appnet_application_to_metadata_json_string (appnet_application_t *self);

// Self test of this class.
void
    appnet_application_test (bool verbose);

// CLASS: appnet_client
// Appnet-Client
appnet_client_t *
    appnet_client_new (appnet_t *parent);

// Create a new appnet_client.
appnet_client_t *
    appnet_client_new_from_zyre (zyre_event_t *zyre_evt);

// Destroy the appnet_client.
void
    appnet_client_destroy (appnet_client_t **self_p);

//
char *
    appnet_client_to_metadata_json_string (appnet_client_t *self);

// get client name
const char *
    appnet_client_get_name (appnet_client_t *self);

// set client name
void
    appnet_client_set_name (appnet_client_t *self, const char *name);

// get client name
const char *
    appnet_client_get_peer_id (appnet_client_t *self);

// print the client info
void
    appnet_client_print (appnet_client_t *self);

// return parent appnet-node
appnet_t *
    appnet_client_parent (appnet_client_t *self);

// Self test of this class.
void
    appnet_client_test (bool verbose);

// CLASS: appnet_msg
// Create trigger action msg (as zmsg) with string argument
zmsg_t *
    appnet_msg_create_trigger_action (const char *action_name, const char *args);

// Create trigger action msg (as zmsg) with data-buffer
zmsg_t *
    appnet_msg_create_trigger_action_data (const char *action_name, void *data, size_t size);

// Create a generic zmsg with multiple strings packed as individual zframes.
zmsg_t *
    appnet_msg_create_generic_string_list_message (const char *msg_type, uint8_t amount, const char *string_data, ...);

// Self test of this class.
void
    appnet_msg_test (bool verbose);

// CLASS: appnet_view_context
// Create a new appnet_view_context.
appnet_view_context_t *
    appnet_view_context_new (const char *viewname);

// Destroy the appnet_view_context.
void
    appnet_view_context_destroy (appnet_view_context_t **self_p);

// Get name of this view
const char *
    appnet_view_context_viewname (appnet_view_context_t *self);

// Get time this view is going to triggered (in ms)
uint64_t
    appnet_view_context_next_triggertime (appnet_view_context_t *self);

// Set interval for this view (in milliseconds)
void
    appnet_view_context_set_interval (appnet_view_context_t *self, int interval_in_ms);

// Get userdata
void *
    appnet_view_context_userdata (appnet_view_context_t *self);

// set userdata
void
    appnet_view_context_set_userdata (appnet_view_context_t *self, void *userdata);

// set this user(peer-id) to be subscriber
void
    appnet_view_context_add_subscriber (appnet_view_context_t *self, const char *peer_id);

// remove this user(peer-id) from subscriber-list
void
    appnet_view_context_remove_subscriber (appnet_view_context_t *self, const char *peer_id);

// Get the hashtable of all subscrbiers on this view
zhash_t *
    appnet_view_context_get_subscriber_map (appnet_view_context_t *self);

// Get amount of subscribers
int
    appnet_view_context_get_amount_subscribers (appnet_view_context_t *self);

// Setup data for next interval
void
    appnet_view_context_prepare_next_interval (appnet_view_context_t *self);

// Set serialized view-data
void
    appnet_view_context_set_data (appnet_view_context_t *self, void *data, size_t size);

// Get zmsg and clears internal zmsg-pointer to NULL
zmsg_t *
    appnet_view_context_get_zmsg (appnet_view_context_t *self);

// Self test of this class.
void
    appnet_view_context_test (bool verbose);

''')
