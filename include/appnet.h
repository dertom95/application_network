/*  =========================================================================
    appnet - class description

    Copyright (c) the Contributors as noted in the AUTHORS file.

    This file is part of application-network, an open-source framework for connecting application and viewers p2p

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef APPNET_H_INCLUDED
#define APPNET_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/appnet.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//
typedef void (appnet_on_app_enter) (
    appnet_application_t *application, void *userdata);

//
typedef void (appnet_on_client_enter) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_action_triggered) (
    const char *action_name, const char *args, uint8_t caller_type, void *called_by, void *userdata);

//
typedef void (appnet_on_action_triggered_data) (
    const char *action_name, void *args_data, size_t args_size, uint8_t caller_type, void *called_by, void *userdata);

//
typedef void (appnet_on_client_enter) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_client_exit) (
    appnet_client_t *client, void *userdata);

//
typedef void (appnet_on_app_exit) (
    appnet_application_t *client, void *userdata);

//  Appnet
APPLICATION_NETWORK_EXPORT appnet_t *
    appnet_new (const char *node_name);

//  Destroy the appnet.
APPLICATION_NETWORK_EXPORT void
    appnet_destroy (appnet_t **self_p);

//  Set timeout
APPLICATION_NETWORK_EXPORT void
    appnet_set_timeout (appnet_t *self, float timeout);

//  Is this appnet an application?
APPLICATION_NETWORK_EXPORT bool
    appnet_is_application (appnet_t *self);

//  Set the current appnet to be an application
APPLICATION_NETWORK_EXPORT appnet_application_t *
    appnet_set_application (appnet_t *self);

//  Get the application-object
APPLICATION_NETWORK_EXPORT appnet_application_t *
    appnet_get_application (appnet_t *self);

//  Is this appnet a client?
APPLICATION_NETWORK_EXPORT bool
    appnet_is_client (appnet_t *self);

//  Set the current appnet to be a client
APPLICATION_NETWORK_EXPORT appnet_client_t *
    appnet_set_client (appnet_t *self);

//  Get the client-object
APPLICATION_NETWORK_EXPORT appnet_client_t *
    appnet_get_client (appnet_t *self);

//  Try to receive message. Or none if timeouted...(return type 0)
//  This method will call appropriate callbacks
APPLICATION_NETWORK_EXPORT uint8_t
    appnet_receive_event (appnet_t *self);

//  Receive all messages and call the corresponding callbacks
APPLICATION_NETWORK_EXPORT void
    appnet_receive_all_events (appnet_t *self);

//  Start the node
APPLICATION_NETWORK_EXPORT void
    appnet_start (appnet_t *self);

//  Stop the node
APPLICATION_NETWORK_EXPORT void
    appnet_stop (appnet_t *self);

//  returns info for underlying application or client
//  Caller owns return value and must destroy it when done.
APPLICATION_NETWORK_EXPORT char *
    appnet_node_signature (appnet_t *self);

//  Get underlying zyre-node
APPLICATION_NETWORK_EXPORT zyre_t *
    appnet_get_zyre_node (appnet_t *self);

//  get client by uuid
APPLICATION_NETWORK_EXPORT appnet_client_t *
    appnet_get_remote_client (appnet_t *self, const char *client_uuid);

//  get application by uuid
APPLICATION_NETWORK_EXPORT appnet_application_t *
    appnet_get_remote_application (appnet_t *self, const char *application_uuid);

//  Return all connected applications
APPLICATION_NETWORK_EXPORT zhash_t *
    appnet_get_remote_applications (appnet_t *self);

//  Return all connection application names
APPLICATION_NETWORK_EXPORT zlist_t *
    appnet_get_remote_application_names (appnet_t *self);

//  custom: send string to application
APPLICATION_NETWORK_EXPORT void
    appnet_remote_send_string (appnet_t *self, const char *peer_id, const char *string_data);

//  custom: send buffer(void* size) to application
APPLICATION_NETWORK_EXPORT void
    appnet_remote_send_buffer (appnet_t *self, const char *peer_id, void *data, size_t size);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_client_exit (appnet_t *self, appnet_on_client_exit callback, void *userdata);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_app_exit (appnet_t *self, appnet_on_app_exit callback, void *userdata);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_app_enter (appnet_t *self, appnet_on_app_enter callback, void *userdata);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_client_enter (appnet_t *self, appnet_on_client_enter callback, void *userdata);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_action_triggered (appnet_t *self, appnet_on_action_triggered callback, void *userdata);

//
APPLICATION_NETWORK_EXPORT void
    appnet_set_on_action_triggered_data (appnet_t *self, appnet_on_action_triggered_data callback, void *userdata);

//  Self test of this class.
APPLICATION_NETWORK_EXPORT void
    appnet_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
