################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libapplication_network_destructors = destructors.lib

class Appnet(object):
    """

    """

    def __init__(self, node_name):
        """
        Appnet
        """
        p = utils.lib.appnet_new(utils.to_bytes(node_name))
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libapplication_network_destructors.appnet_destroy_py)

    def set_timeout(self, timeout):
        """
        Set timeout
        """
        utils.lib.appnet_set_timeout(self._p, timeout)

    def is_application(self):
        """
        Is this appnet an application?
        """
        return utils.lib.appnet_is_application(self._p)

    def set_application(self):
        """
        Set the current appnet to be an application
        """
        return utils.lib.appnet_set_application(self._p)

    def get_application(self):
        """
        Get the application-object
        """
        return utils.lib.appnet_get_application(self._p)

    def is_client(self):
        """
        Is this appnet a client?
        """
        return utils.lib.appnet_is_client(self._p)

    def set_client(self):
        """
        Set the current appnet to be a client
        """
        return utils.lib.appnet_set_client(self._p)

    def get_client(self):
        """
        Get the client-object
        """
        return utils.lib.appnet_get_client(self._p)

    def process_views(self):
        """
        check if views needs to trigger and call the callback
        """
        utils.lib.appnet_process_views(self._p)

    def receive_event(self):
        """
        Try to receive message. Or none if timeouted...(return type 0)
        This method will call appropriate callbacks
        """
        return utils.lib.appnet_receive_event(self._p)

    def receive_all_events(self):
        """
        Receive all messages and call the corresponding callbacks
        """
        utils.lib.appnet_receive_all_events(self._p)

    def start(self):
        """
        Start the node
        """
        utils.lib.appnet_start(self._p)

    def stop(self):
        """
        Stop the node
        """
        utils.lib.appnet_stop(self._p)

    def node_signature(self):
        """
        returns info for underlying application or client
        """
        return utils.lib.appnet_node_signature(self._p)

    def get_zyre_node(self):
        """
        Get underlying zyre-node
        """
        return utils.lib.appnet_get_zyre_node(self._p)

    def get_remote_client(self, client_uuid):
        """
        get client by uuid
        """
        return utils.lib.appnet_get_remote_client(self._p, utils.to_bytes(client_uuid))

    def get_remote_application(self, application_uuid):
        """
        get application by uuid
        """
        return utils.lib.appnet_get_remote_application(self._p, utils.to_bytes(application_uuid))

    def get_remote_applications(self):
        """
        Return all connected applications
        """
        return utils.lib.appnet_get_remote_applications(self._p)

    def get_remote_application_names(self):
        """
        Return all connection application names
        """
        return utils.lib.appnet_get_remote_application_names(self._p)

    def remote_send_string(self, msg_type, to_peer, recipent, string_data):
        """
        custom: send string to application.
        if to_peer=true: data is whispered to get_peer_id
        if to_peer=false: data is shouted in group
        """
        utils.lib.appnet_remote_send_string(self._p, utils.to_bytes(msg_type), to_peer, utils.to_bytes(recipent), utils.to_bytes(string_data))

    def remote_send_buffer(self, msg_type, to_peer, recipent, data, size):
        """
        custom: send buffer(void* size) to application
        if to_peer=true: data is whispered to get_peer_id
        if to_peer=false: data is shouted in group
        """
        utils.lib.appnet_remote_send_buffer(self._p, utils.to_bytes(msg_type), to_peer, utils.to_bytes(recipent), data._p, size)

    def set_on_client_exit(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_client_exit(self._p, callback, userdata._p)

    def set_on_app_exit(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_app_exit(self._p, callback, userdata._p)

    def set_on_app_enter(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_app_enter(self._p, callback, userdata._p)

    def set_on_client_enter(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_client_enter(self._p, callback, userdata._p)

    def set_on_action_triggered(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_action_triggered(self._p, callback, userdata._p)

    def set_on_action_triggered_data(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_action_triggered_data(self._p, callback, userdata._p)

    def set_on_view_received(self, callback, userdata):
        """

        """
        utils.lib.appnet_set_on_view_received(self._p, callback, userdata._p)

    def set_on_view_request(self, callback):
        """

        """
        utils.lib.appnet_set_on_view_request(self._p, callback)

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.appnet_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
