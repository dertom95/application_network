################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libapplication_network_destructors = destructors.lib

class AppnetApplication(object):
    """

    """

    def __init__(self, parent):
        """
        Appnet-Application
        """
        p = utils.lib.appnet_application_new(parent._p)
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libapplication_network_destructors.appnet_application_destroy_py)

    @staticmethod
    def new_from_zyre(evt, parent):
        """
        Create a new appnet_application.
        """
        return utils.lib.appnet_application_new_from_zyre(evt._p, parent._p)

    def has_action(self, action_name):
        """
        checks if this action exists in this application
        """
        return utils.lib.appnet_application_has_action(self._p, utils.to_bytes(action_name))

    def get_name(self):
        """
        get application name
        """
        return utils.lib.appnet_application_get_name(self._p)

    def set_name(self, application_name):
        """
        set application name
        """
        utils.lib.appnet_application_set_name(self._p, utils.to_bytes(application_name))

    def get_peer_id(self):
        """
        get zyre peer id
        """
        return utils.lib.appnet_application_get_peer_id(self._p)

    def set_peer_id(self, peer_id):
        """
        set zyre peer id
        """
        utils.lib.appnet_application_set_peer_id(self._p, utils.to_bytes(peer_id))

    def parent(self):
        """
        return parent appnet-node
        """
        return utils.lib.appnet_application_parent(self._p)

    def print_py(self):
        """
        print application data
        """
        utils.lib.appnet_application_print(self._p)

    def add_view(self, view, interval):
        """
        add application view ( appnet needs to be set as application-type )
        """
        return utils.lib.appnet_application_add_view(self._p, utils.to_bytes(view), interval)

    def add_views(self, interval, view_amount, view, *view_args):
        """
        add multiple views to applications
        """
        utils.lib.appnet_application_add_views(self._p, interval, view_amount, utils.to_bytes(view), *view_args)

    def has_view(self, view_name):
        """
        checks if this viewname exists in this application
        """
        return utils.lib.appnet_application_has_view(self._p, utils.to_bytes(view_name))

    def zyre_group_name(self, view_name):
        """
        return full zyre-groupname [peer-id].[viewname]
        """
        return utils.lib.appnet_application_zyre_group_name(self._p, utils.to_bytes(view_name))

    def add_subscriber(self, viewname, peer_id):
        """
        add this user(peer-id) to be subscriber on the specified view
        """
        utils.lib.appnet_application_add_subscriber(self._p, utils.to_bytes(viewname), utils.to_bytes(peer_id))

    def remove_subscriber(self, viewname, peer_id):
        """
        remove this user(peer-id) from subscriber-list of the specified view
        """
        utils.lib.appnet_application_remove_subscriber(self._p, utils.to_bytes(viewname), utils.to_bytes(peer_id))

    def remove_subscriber_from_views(self, peer_id):
        """
        remove subscriber from all views
        """
        utils.lib.appnet_application_remove_subscriber_from_views(self._p, utils.to_bytes(peer_id))

    def get_view_keys(self):
        """
        get zlist of all views-keys
        """
        return utils.lib.appnet_application_get_view_keys(self._p)

    def get_view_hashtable(self):
        """
        return the view-hashtable
        """
        return utils.lib.appnet_application_get_view_hashtable(self._p)

    def get_action_list(self):
        """
        get zlist of all actions
        """
        return utils.lib.appnet_application_get_action_list(self._p)

    def add_action(self, action):
        """
        add application action ( appnet needs to be set as application-type )
        """
        return utils.lib.appnet_application_add_action(self._p, utils.to_bytes(action))

    def add_actions(self, action_amount, action, *action_args):
        """
        add multiple views to applications
        """
        utils.lib.appnet_application_add_actions(self._p, action_amount, utils.to_bytes(action), *action_args)

    def remote_subscribe_view(self, view_name):
        """
        remote: subscribe for this application's view
        """
        utils.lib.appnet_application_remote_subscribe_view(self._p, utils.to_bytes(view_name))

    def remote_subscribe_views(self, view_amount, views, *views_args):
        """
        subscribe to multiple views on this application
        """
        utils.lib.appnet_application_remote_subscribe_views(self._p, view_amount, utils.to_bytes(views), *views_args)

    def remote_unsubscribe_view(self, view_name):
        """
        remote: unsubscribe from specified view
        """
        utils.lib.appnet_application_remote_unsubscribe_view(self._p, utils.to_bytes(view_name))

    def remote_unsubscribe_all(self):
        """
        remote: unsubscribe from all views of this application
        """
        utils.lib.appnet_application_remote_unsubscribe_all(self._p)

    def remote_trigger_action(self, action_name, args):
        """
        remote: trigger action
        """
        utils.lib.appnet_application_remote_trigger_action(self._p, utils.to_bytes(action_name), utils.to_bytes(args))

    def remote_trigger_action_data(self, action_name, data, size):
        """
        remote: trigger action
        """
        utils.lib.appnet_application_remote_trigger_action_data(self._p, utils.to_bytes(action_name), data._p, size)

    def remote_reconnect(self):
        """
        Reconnect to subscribed views
        """
        utils.lib.appnet_application_remote_reconnect(self._p)

    def to_metadata_json_string(self):
        """
        get application meta data a string-json
        """
        return utils.lib.appnet_application_to_metadata_json_string(self._p)

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.appnet_application_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
